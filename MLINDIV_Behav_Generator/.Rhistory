theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Thalamus") +
geom_text(data = exploration, aes(x = 0.8, y = 0.1,
label = label_tha_e[1]), parse = TRUE)+
geom_text(data = exploration, aes(x = 0.8, y = 0.05,
label = label_tha_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5), axis.text=element_text(size=12) )
tha_e
tha_e <- ggplot(exploration, aes(acc, thalamus)) +
geom_point(color = colors[1]) +
geom_smooth(method = "lm", color = colors[1], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Thalamus") +
geom_text(data = exploration, aes(x = 0.8, y = 0.1,
label = label_tha_e[1]), parse = TRUE)+
geom_text(data = exploration, aes(x = 0.8, y = 0.05,
label = label_tha_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5), axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold") )
tha_e
tha_e <- ggplot(exploration, aes(acc, thalamus)) +
geom_point(color = colors[1]) +
geom_smooth(method = "lm", color = colors[1], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Thalamus") +
geom_text(data = exploration, aes(x = 0.8, y = 0.1,
label = label_tha_e[1]), parse = TRUE)+
geom_text(data = exploration, aes(x = 0.8, y = 0.05,
label = label_tha_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5), axis.text=element_text(size=12))
rsc_e <- ggplot( exploration, aes(acc, retrosplenial)) +
geom_point(color = colors[2]) +
geom_smooth(method = "lm", color = colors[2], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') + xlab('') +
labs(title="Retrosplenial Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_rsc_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_rsc_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5), axis.text=element_text(size=12) )
prc_e <- ggplot( exploration, aes( acc, precuneus)) +
geom_point(color = colors[3]) +
geom_smooth(method = "lm", color = colors[3], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Precuneus") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_prc_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_prc_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.text=element_text(size=12))
ext_e <- ggplot( exploration, aes(acc, extrastriate)) +
geom_point(color = colors[4]) +
geom_smooth(method = "lm", color = colors[4], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Extrastriate Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_ext_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_ext_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.text=element_text(size=12))
str_e <- ggplot( exploration, aes(acc, early_visual)) +
geom_point(color = colors[5]) +
geom_smooth(method = "lm", color = colors[5], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Striate Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_str_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_str_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.text=element_text(size=12))
str_e <- ggplot( exploration, aes(acc, early_visual)) +
geom_point(color = colors[5]) +
geom_smooth(method = "lm", color = colors[5], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Striate Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_str_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_str_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.title.x = element_text(face = "bold",size = 10), axis.text=element_text(size=12))
str_e
str_e <- ggplot( exploration, aes(acc, early_visual)) +
geom_point(color = colors[5]) +
geom_smooth(method = "lm", color = colors[5], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Striate Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_str_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_str_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.title.x = element_text(face = "bold",size = 15), axis.text=element_text(size=12))
str_e
str_e <- ggplot( exploration, aes(acc, early_visual)) +
geom_point(color = colors[5]) +
geom_smooth(method = "lm", color = colors[5], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Striate Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_str_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_str_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.title.x = element_text(face = "bold",size = 15, color = 'red'), axis.text=element_text(size=12))
str_e
str_e <- ggplot( exploration, aes(acc, early_visual)) +
geom_point(color = colors[5]) +
geom_smooth(method = "lm", color = colors[5], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Striate Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_str_e[1]), parse = TRUE)+
geom_text(data =  exploration, aes(x = 0.8, y = 0.05,
label = label_str_e[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.text=element_text(size=12))
# not used
aud_e <- ggplot( exploration, aes(acc, auditory)) +
geom_point(color = colors[6]) +
geom_smooth(method = "lm", color = colors[6], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Auditory Cortex") +
geom_text(data =  exploration, aes(x = 0.8, y = 0.1,
label = label_aud_e), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.text=element_text(size=12))
tha_t <- ggplot(test, aes(acc, thalamus)) +
geom_point(color = colors[1]) +
geom_smooth(method = "lm", color = colors[1], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Thalamus") +
geom_text(data = test, aes(x = 0.8, y = 0.1,
label = label_tha_t[1]), parse = TRUE)+
geom_text(data = test, aes(x = 0.8, y = 0.05,
label = label_tha_t[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.text=element_text(size=12))
rsc_t <- ggplot(test, aes(acc, retrosplenial)) +
geom_point(color = colors[2]) +
geom_smooth(method = "lm", color = colors[2], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Retrosplenial Cortex") +
geom_text(data = test, aes(x = 0.8, y = 0.1,
label = label_rsc_t[1]), parse = TRUE)+
geom_text(data = test, aes(x = 0.8, y = 0.05,
label = label_rsc_t[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5), axis.text=element_text(size=12) )
prc_t <- ggplot(test, aes(acc, precuneus)) +
geom_point(color = colors[3]) +
geom_smooth(method = "lm", color = colors[3], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Precuneus") +
geom_text(data = test, aes(x = 0.8, y = 0.1,
label = label_prc_t[1]), parse = TRUE)+
geom_text(data = test, aes(x = 0.8, y = 0.05,
label = label_prc_t[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5), axis.text=element_text(size=12) )
ext_t <- ggplot(test, aes(acc, extrastriate)) +
geom_point(color = colors[4]) +
geom_smooth(method = "lm", color = colors[4] , size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Extrastriate Cortex") +
geom_text(data = test, aes(x = 0.8, y = 0.1,
label = label_ext_t[1]), parse = TRUE)+
geom_text(data = test, aes(x = 0.8, y = 0.05,
label = label_ext_t[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5) , axis.text=element_text(size=12))
str_t <- ggplot(test, aes(acc, early_visual)) +
geom_point(color = colors[5]) +
geom_smooth(method = "lm", color = colors[5], size = 0.5) +
theme(legend.position=c(0,1), legend.justification=c(0,1))+
ylim(0,0.4) + ylab('') +  xlab('') +
labs(title="Striate Cortex") +
geom_text(data = test, aes(x = 0.8, y = 0.1,
label = label_str_t[1]), parse = TRUE)+
geom_text(data = test, aes(x = 0.8, y = 0.05,
label = label_str_t[2]), parse = TRUE)+
theme(panel.background = element_blank(),panel.border = element_rect(colour = "black", fill=NA, size=1.5), axis.text=element_text(size=12) )
library("gridExtra")
library(gtable)
library(grid)
grid.arrange(arrangeGrob(tha_e, rsc_e, prc_e, ext_e, str_e, ncol = 5, top = textGrob("Exploration Phase", vjust = 1, gp = gpar(fontface = "bold", cex = 1.2))),
arrangeGrob(tha_t, rsc_t, prc_t, ext_t, str_t, ncol = 5, top = textGrob("Test Phase", vjust = 1, gp = gpar(fontface = "bold", cex = 1.2))),
ncol=1,
left = textGrob("Classification Strength", rot = 90, vjust = 1, gp = gpar(fontface = "bold", cex = 1.5)),
bottom = textGrob("Navigation Performance", vjust = 0, gp = gpar(fontface = "bold", cex = 1.5)))
grid.arrange(arrangeGrob(tha_e, rsc_e, prc_e, ext_e, str_e, ncol = 5, top = textGrob("Exploration Phase", vjust = 1, gp = gpar(fontface = "bold", cex = 1.5))),
arrangeGrob(tha_t, rsc_t, prc_t, ext_t, str_t, ncol = 5, top = textGrob("Test Phase", vjust = 1, gp = gpar(fontface = "bold", cex = 1.5))),
ncol=1,
left = textGrob("Classification Strength", rot = 90, vjust = 1, gp = gpar(fontface = "bold", cex = 1.8)),
bottom = textGrob("Navigation Performance", vjust = 0, gp = gpar(fontface = "bold", cex = 1.8)))
library(sparklyr)
library(sparklyr.nested)
sc <- spark_connect(master = "local", version = "2.3")
# When using real clusters, you should use copy_to() to transfer only small tables from R; large data transfers should be performed with specialized data transfer tools.
cars <- copy_to(sc, mtcars)
# Here is another example that groups the cars dataset by transmission type:
cars %>%
mutate(transmission = ifelse(am == 0, "automatic", "manual")) %>%
group_by(transmission) %>%
summarise_all(mean)
library(sparklyr)
library(dplyr)
# Here is another example that groups the cars dataset by transmission type:
cars %>%
mutate(transmission = ifelse(am == 0, "automatic", "manual")) %>%
group_by(transmission) %>%
summarise_all(mean)
library(dplyr)
? do
? do.call()
# Retrieve spark-home-path
spark_home_dir()
library(sparklyr)
library(sparklyr.nested)
library(dplyr)
sc <- spark_connect(master = "local", version = "2.3")
# 2. You can diagnose whether a connection issue is specific to R or Spark in general by running an example job through spark-submit and validating that no errors are thrown:
# Find the spark directory using an environment variable
spark_home <- Sys.getenv("SPARK_HOME")
# Or by getting the local spark installation
spark_home <- sparklyr::spark_home_dir()
# Then, execute the sample compute Pi example by replacing “local” with the correct master parameter that you are troubleshooting:
# Launching a sample application to compute Pi
system2(
file.path(spark_home, "bin", "spark-submit"),
c(
"--master", "local",
"--class", "org.apache.spark.examples.SparkPi",
dir(file.path(spark_home, "examples", "jars"),
pattern = "spark-examples", full.names = TRUE),
100),
stderr = FALSE
)
setwd("~/Desktop/x2go/behave/raw_behav")
# Create a list of file folders containing participant data
MLINDIV_filelist <- list.files()
library(rprime)
library(tidyverse)
library(wrapr)
library(plyr)
install.packages(rprime)
install.packages("rprime")
# Load proper packages. Rprime is built specifically for EPrime. If you do not have these packages installed, use
#     install.packages("[package name goes here]") to install it on your R client.
library(rprime)
MLINDIV_filelist
MLINDIV_filelist <- MLINDIV_filelist[nchar(MLINDIV_filelist) == 3]
MLINDIV_filelist
master_file <- tibble()
# Loop through each participant's folder
for (participant_file_folder in 1:length(MLINDIV_filelist)){
current_file <- MLINDIV_filelist[participant_file_folder]
master_participant <- tibble()
eprime_txt_files <- list.files(MLINDIV_filelist[participant_file_folder], pattern = ".*.txt")
# Loop through each .txt file in that participant's folder, build a master participant file, to be appended
# to the mater file at the end of loop
for (file_i in 1:length(eprime_txt_files)){
eprime_txt_files <- list.files(MLINDIV_filelist[participant_file_folder], pattern = ".*.txt")
# Create data frame, remove header/ender rows and store for later use
e_file <- read_eprime(paste0(MLINDIV_filelist[participant_file_folder], "/" , eprime_txt_files[file_i]))
# Check to see if file is complete
if (last(e_file) != "*** LogFrame End ***"){
print(paste(eprime_txt_files[file_i], "skipped", "incomplete file"))
next
}
e_frame <- FrameList(e_file)
e_df <- to_data_frame(e_frame)
# Check to see if file contains minimum amount of rows for compilation
if (nrow(e_df) < 10){
print(paste(eprime_txt_files[file_i], "skipped", "row #", nrow(e_df)))
next
}
e_df_header <- e_df[1, ]
e_df <- e_df[2:(nrow(e_df)-1), ]
eprime_test_txt_files <- list.files(MLINDIV_filelist[participant_file_folder], pattern = "Test.*.txt")
print(eprime_txt_files[file_i])
# If a test trial, create a separate tibble for the TrialProcedures, which contain start/end goals and other variables
if (eprime_txt_files[file_i] %in% eprime_test_txt_files){
# Create the trial_proc tibble containing the trial procedure meta-data
trial_proc <-e_df[e_df$Procedure == "TrialProc" | e_df$Procedure == "TrialRevProc", ]
trial_proc <- as.tibble(trial_proc) %>%
select(qc(
Procedure, Sample, itilist, ITI.OnsetTime,
ITIDur, objlist, ObjDur,
pairlist, startPosition, startFacing,
StartIm, endPosition, EndIm
))
# Update the e_df data frame to be a tibble that contains only the variables we care about
master_tibble <- as.tibble(e_df) %>%
select(qc(
Eprime.Basename, Eprime.LevelName,
ImageFile, Choose.OnsetTime,
Choose.RTTime, Choose.RT,
VideoFile, MoveVid.OnsetTime
))
# Create an empty tibble where a for loop creates repetitions of trial_proc rows to be used in adding to
# the master tibble as new columns ( so for each row, it will now have not only movement data,
# but also what trial type it is with Start and end goals, etc)
trial_cols <- tibble()
trial_proc_location <- which(e_df$Procedure == "TrialProc" | e_df$Procedure == "TrialRevProc")
place <- 0
i = 1
for (row_location in 1:length(trial_proc_location)){
repeat_num <- trial_proc_location[row_location] - place - 1
curr_row <- trial_proc[row_location, ]
new_rows <- curr_row[rep(seq_len(nrow(curr_row)), each = repeat_num), ]
trial_cols <- rbind(trial_cols, new_rows)
place <- trial_proc_location[row_location]
i <- i + 1
}
# Remove TrialProc rows from master tibble, as well as the last row (which is useless), then column bind the new
# trial_cols(which should now have the same # of rows as the master tibble) to the master tibble
master_tibble <- master_tibble[-c(trial_proc_location), ]
master_tibble <- master_tibble[-(nrow(master_tibble)), ]
master_tibble <- cbind(trial_cols, master_tibble)
# Create a data frame with same number of rows as master tibble, that contains 3 columns of repeating values:
# Subject (participant #), Task (Explore | Test), TaskType (Explore: 1 or 2 | Test: A1...C3)
Task <- strsplit(e_df_header$DataFile.Basename, "_")[[1]][1]
Subject <- e_df_header$Subject
Task_type <- strsplit(e_df_header$DataFile.Basename, "-")[[1]][1]
Task_type <- paste0(strsplit(Task_type, "_")[[1]][3], strsplit(Task_type, "_")[[1]][4])
# Grab the finish time of procedure
if(!is.null(e_frame[length(e_frame)][[1]]["Finished.OnsetTime"][[1]])){
Finished.OnsetTime <- as.integer(e_frame[length(e_frame)][[1]]["Finished.OnsetTime"][[1]])
} else {
Finished.OnsetTime <- NA
}
# Grab the finish time of procedure
# Finished.OnsetTime <- as.integer(e_frame[length(e_frame)][[1]]["Finished.OnsetTime"][[1]])
# Finished.OnsetTime <- rep(Finished.OnsetTime, nrow(master_tibble))
meta_df <- cbind(Subject, Task, Task_type, Finished.OnsetTime)
meta_df <- meta_df[rep(seq_len(nrow(meta_df)), each = nrow(master_tibble)), ]
# Bind that meta data frame to the master tibble
master_tibble <- cbind(meta_df, master_tibble)
}
else {
# Update the e_df data frame to be a tibble that contains only the variables we care about
master_tibble <- as.tibble(e_df) %>%
select(qc(
Eprime.Basename, Eprime.LevelName,
ImageFile, Choose.OnsetTime,
Choose.RTTime, Choose.RT,
VideoFile, MoveVid.OnsetTime
))
# Create a data frame with same number of rows as master tibble, that contains 3 columns of repeating values:
# Subject (participant #), Task (Explore | Test), TaskType (Explore: 1 or 2 | Test: A1...C3)
Task <- strsplit(e_df_header$DataFile.Basename, "-")[[1]][1]
Subject <- e_df_header$Subject
Task_type <- strsplit(e_df_header$DataFile.Basename, "-")[[1]][3]
Procedure <- NA
Sample <- NA
itilist <- NA
ITIDur <- NA
ITI.OnsetTime <- NA
objlist <- NA
ObjDur <- NA
pairlist <- NA
startPosition <- NA
startFacing <- NA
StartIm <- NA
endPosition <- NA
EndIm <- NA
# Grab the finish time of procedure
if(!is.null(e_frame[length(e_frame)][[1]]["Finished.OnsetTime"][[1]])){
Finished.OnsetTime <- as.integer(e_frame[length(e_frame)][[1]]["Finished.OnsetTime"][[1]])
} else {
Finished.OnsetTime <- NA
}
meta_df <- cbind(Subject, Task, Task_type, Procedure, Sample, Finished.OnsetTime, itilist, ITIDur, ITI.OnsetTime, objlist, ObjDur, pairlist, startPosition, startFacing, StartIm, endPosition, EndIm)
meta_df <- meta_df[rep(seq_len(nrow(meta_df)), each = nrow(master_tibble)), ]
# Bind that meta data frame to the master tibble
master_tibble <- cbind(meta_df, master_tibble)
}
# Append master_tibble to participant_master file through rbind()
master_participant <- rbind(master_participant, master_tibble)
}
# Append master_participant file to the master_file
master_file <- rbind(master_file, master_participant)
}
setwd("~/Desktop/MLINDIV/behavioral/MLINDIV_Behav_Generator")
## Step 1. load data
mass <- read.csv("MLINDIV_behavioral_master_Dec30.csv", head = TRUE)
trial_mass <- read.csv("MLINDIV_trial_master_Feb.csv", head = TRUE)
setwd("~/Desktop/MLINDIV/behavioral/MLINDIV_Behav_Generator")
## Step 1. load data
mass <- read.csv("MLINDIV_behavioral_master_Dec30.csv", head = TRUE)
trial_mass <- read.csv("MLINDIV_trial_master_Feb.csv", head = TRUE)
View(mass)
trial_mass <- read.csv("MLINDIV_trial_master.csv", head = TRUE)
View(trial_mass)
mass <- filter(mass, mass$Subject != 113) # subject113 has two exploration1s and no exploration2, which needs to be fixed, so not process it for now.
folder_name <- 'tmp_meta_file'
useless_list <- c(4,15,23, 30, 40, 48, 51, 52, 79, 1, 75,76, 92, 113)
source(here::here('mass_generator.R'))
source(here::here('single_subject_file_generator.R'))
source(here::here('exploration_file_generator.R'))
source(here::here('test_file_generator.R'))
source(here::here('direction.R'))
source(here::here('betaseries_event_generator.R'))
source(here::here('gridcat_event_generator.R'))
meta_generator(mass, trial_mass, folder_name, useless_list)
source(here::here('single_subject_file_generator.R'))
meta_generator(mass, trial_mass, folder_name, useless_list)
test2 <- filter(mass, Task_type == 2)
View(test2)
View(allo_rot_dir)
View(exploration_file_generator)
demo = 'T2_U2'
label1 <- strsplit(demo, split = character(0))
label1
label1[[1]][2]
label1[[1]]
label1[[1]][1]
label1[[1]][5]
label1[[1]][2] == label1[[1]][5]
View(test_single_run_generator)
View(test_single_run_generator)
View(test_single_trial_generator)
source(here::here('mass_generator.R'))
source(here::here('single_subject_file_generator.R'))
source(here::here('exploration_file_generator.R'))
source(here::here('test_file_generator.R'))
source(here::here('direction.R'))
source(here::here('betaseries_event_generator.R'))
source(here::here('gridcat_event_generator.R'))
folder_name <- 'tmp_meta_file'
meta_generator(mass, trial_mass, folder_name, useless_list)
demo <- filter(mass, Task_type == 'B3')
View(demo)
View(trial_mass)
demob4 <- filter(mass, Task_type == 'B4')
View(demob4)
View(ego_rot_dir)
source(here::here('direction.R'))
source(here::here('betaseries_event_generator.R'))
folder_name <- 'tmp_meta_file'
meta_generator(mass, trial_mass, folder_name, useless_list)
allo_rot_dir('Y2_Y4')
allo_rot_dir('Y2_Y2')
allo_rot_dir('Y2_Y3')
source(here::here('direction.R'))
allo_rot_dir('Y2_Y3')
allo_rot_dir('Y2_Y2')
allo_rot_dir('Y2_Y4')
meta_generator(mass, trial_mass, folder_name, useless_list)
library(tidyverse)
library(dplyr)
library(here)
source(here::here('mass_generator.R'))
source(here::here('single_subject_file_generator.R'))
source(here::here('exploration_file_generator.R'))
source(here::here('test_file_generator.R'))
source(here::here('direction.R'))
source(here::here('betaseries_event_generator.R'))
source(here::here('gridcat_event_generator.R'))
## Step 1. load data
mass <- read.csv("MLINDIV_behavioral_master_Dec30.csv", head = TRUE)
trial_mass <- read.csv("MLINDIV_trial_master.csv", head = TRUE)
mass <- filter(mass, mass$Subject != 113) # subject113 has two exploration1s and no exploration2, which needs to be fixed, so not process it for now.
folder_name <- 'tmp_meta_file'
useless_list <- c(4,15,23, 30, 40, 48, 51, 52, 79, 1, 75,76, 92, 113)
meta_generator(mass, trial_mass, folder_name, useless_list)
View(translation_allo)
folder_raw = 'betaseries_event'
unlink(folder_raw, recursive = TRUE) # delete folder
dir.create(folder_raw)
total_unique_list <- as.data.frame(unique(mass$Subject))
names(total_unique_list) <- c('subj')
total_unique_list <- filter(total_unique_list, !total_unique_list$subj %in% useless_list)
for (i in total_unique_list$subj){
subj = i
print(i)
betaseries_event_raw(subj, 'tmp_meta_file', folder_raw, translation_allo)
}
View(trial_mass)
View(trial_mass)
demo <- filter(trial_mass, Subject == 54)
View(demo)
useless_list <- c(4,15,23, 30, 40, 48, 51, 52, 79, 1, 75,76, 92, 113, 54)
folder_name <- 'tmp_meta_file'
meta_generator(mass, trial_mass, folder_name, useless_list)
folder_raw = 'betaseries_event'
dir.create(folder_raw)
total_unique_list <- as.data.frame(unique(mass$Subject))
names(total_unique_list) <- c('subj')
total_unique_list <- filter(total_unique_list, !total_unique_list$subj %in% useless_list)
for (i in total_unique_list$subj){
subj = i
print(i)
betaseries_event_raw(subj, 'tmp_meta_file', folder_raw, translation_allo)
}
demo <- filter(trial_mass, Subject = 55)
demo <- filter(trial_mass, Subject == 55)
View(demo)
demo <- filter(trial_mass, Subject > 53)
demo <- filter(trial_mass, Subject = 53)
demo <- filter(trial_mass, Subject == 53)
demo <- filter(trial_mass, Subject == 52)
demo <- filter(trial_mass, Subject == 53)
View(trial_mass)
View(mass)
